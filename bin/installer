#!/usr/bin/make -f
#/////////////////////////////////////////////////////////////////////////////#

# Deps to sync.
deps = jira jq yq

# Where artifacts go.
out = _build
outbin = $(out)/bin
outsrc = $(out)/src

# Where artifacts are installed.
dest = $(or $(DESTDIR),.)

# `jira` vars.
jira_tag = v1.0.27
jira_git = https://github.com/go-jira/jira
jira_release = $(jira_git)/releases/download/$(jira_tag)
jira_linux_bin = $(jira_release)/jira-linux-amd64
jira_darwin_bin = $(jira_release)/jira-darwin-amd64
jira_windows_bin = $(jira_release)/jira-windows-amd64.exe
jira_bin = $(outbin)/jira_$(platform)
jira_bins = $(foreach plat,$(platforms),$(outbin)/jira_$(plat))
jira_d = .jira.d/config.yml .jira.d/config.sh .jira.d/config .jira.d/bin .jira.d/scripts .jira.d/templates

# `jq` vars.
jq_tag = jq-1.6
jq_git = https://github.com/stedolan/jq
jq_release = $(jq_git)/releases/download/$(jq_tag)
jq_linux_bin = $(jq_release)/jq-linux64
jq_darwin_bin = $(jq_release)/jq-osx-amd64
jq_windows_bin = $(jq_release)/jq-win64.exe
jq_bin = $(outbin)/jq_$(platform)
jq_bins = $(foreach plat,$(platforms),$(outbin)/jq_$(plat))

# `yq` vars.
yq_tag = v1.3
yq_git = https://github.com/bronze1man/yaml2json
yq_release = $(yq_git)/releases/download/$(yq_tag)
yq_linux_bin = $(yq_release)/yaml2json_linux_amd64
yq_darwin_bin = $(yq_release)/yaml2json_darwin_amd64
yq_windows_bin = $(yq_release)/yaml2json_windows_amd64
yq_bin = $(outbin)/yq_$(platform)
yq_bins = $(foreach plat,$(platforms),$(outbin)/yq_$(plat))

# Final list of binaries we care about.
platform_bins = $(foreach dep,$(deps),$($(dep)_bin))
bins = $(foreach dep,$(deps),$(foreach bin,$($(dep)_bins),$(bin)))

# End of configuration.
#/////////////////////////////////////////////////////////////////////////////#

# Dynamic PATH for $(shell) and recipes.
# 	* `install`ed binaries available to both $(shell) and recipes.
# 	* Easy to inject debugging like -x or -e.
# 	* Add new entries with `PATH += /path`.
# 		- Entries may contain colons.
SHELL = env PATH=$(abspath $(outbin)):$(subst $(eval) ,:,$(PATH)) /bin/bash

# Utilities.
wrap  = fold -s -w $$(($(or $1,$${COLUMNS:-80})-3))
wrapi = $(call wrap,$2) | pr -to$(or $1,2)
wrapc = $(call wrap,$2) | column -t -s$(or $1,$$'\t')

# Detect current platform.
ifeq ($(OS),Windows_NT)
  platform = windows
else
  platform = $(shell uname -s | tr [[:upper:]] [[:lower:]])
endif

# Detect output platforms.
plats = linux darwin windows
ifeq ($(filter all,$(MAKECMDGOALS)),all)
  platforms = $(plats)
else
  platforms = $(platform)
endif
ifeq ($(platforms),all)
  override platforms = $(plats)
endif
ifeq ($(platforms),)
  override platforms = $(platform)
endif

# Ensure these exist.
$(outsrc) $(outbin) $(dest)/.jira.d $(dest)/.jira.d/bin:
	mkdir -p $@

# Clone from $dep_git.
$(outsrc)/%.git: | $(outsrc)
	git clone --no-checkout --single-branch $($*_git) $@
	cd $@ && git checkout $($*_ref) -- .

# Fetch everything else from $dep_plat_bin.
$(yq_bins) $(jq_bins) $(jira_bins): | $(outbin)
	curl --progress-bar --location --output "$@" "$($(@F)_bin)"
	chmod +x $@

$(jira_d):
	true

#/////////////////////////////////////////////////////////////////////////////#

## What you are looking at.
help: argv0 = $(word 1,$(MAKEFILE_LIST))
help: ##
	@echo -n "Usage: $(if $(filter Makefile,$(argv0)),make,$(argv0))"
	@echo -e " [config=override ...] [goal ...]\n" | $(wrap)
	@echo -e "Connect JIRA and accelerate the team!\n" | $(wrapi)
	@echo -e "Goals:\n" | $(wrap)
	@sed -n -E\
			-e '/^## +(.*)/{s//\1/;H;$$!d;}'\
			-e $$'/^([^_][-_[:alnum:]]+):.*##/{s//  \\1\t/;G;s/\\n+/ /gp;s/.*//;h;}'\
			$(MAKEFILE_LIST) | sort | $(wrapc)

## Dump resolved values of user variables.
dump: ##
	@printf '%s\n' $(foreach x,$(sort $(.VARIABLES)),\
			$(if $(filter-out environment% default automatic,\
			$(origin $x)),"$x"$$'\t'"$($x)")) |\
		$(call wrapc,,1000)

## Drop build products.
clean: ##
	rm -rf $(out)

## Drop installed binaries.
uninstall: ##
	rm -f $(foreach dep,$(deps),$(dest)/.jira.d/bin/$(notdir $(dep)))

## Copy platform binaries to $DESTDIR/bin.
install-bin: $(platform_bins) | $(dest)/.jira.d/bin ##
	for bin in $^; do \
		cp -a $$bin $(dest)/.jira.d/bin/$$(basename $${bin%_*});\
	done

## Copy repo to $DESTDIR.
install-jirad: $(jira_d) | $(dest)/.jira.d ##
	for bin in $^; do \
		if ! [ "$$bin" -ef "$(dest)/$$bin" ]; then \
			if [ -d "$$bin/" ]; then \
				cp -a $$bin/ $(dest)/$$bin/; \
			else \
				cp -a $$bin $(dest)/$$bin; \
			fi; \
		fi; \
	done

## Copy everything to $DESTDIR.
install: install-jirad install-bin ##

## Fetch and build binaries.
all:: $(bins) ##

# Print help by default.
.DEFAULT_GOAL = help

# List CLI targets here.
.PHONY: help dump all clean install install-bin install-jirad uninstall
